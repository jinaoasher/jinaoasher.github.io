<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>金傲Asher</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jinaoasher.site/"/>
  <updated>2017-10-30T00:08:24.041Z</updated>
  <id>http://jinaoasher.site/</id>
  
  <author>
    <name>金傲Asher</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多维顺序存储数组之地址求解问题</title>
    <link href="http://jinaoasher.site/%E5%A4%9A%E7%BB%B4%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E6%95%B0%E7%BB%84%E4%B9%8B%E5%9C%B0%E5%9D%80%E6%B1%82%E8%A7%A3%E9%97%AE%E9%A2%98/"/>
    <id>http://jinaoasher.site/多维顺序存储数组之地址求解问题/</id>
    <published>2017-10-29T14:08:50.000Z</published>
    <updated>2017-10-30T00:08:24.041Z</updated>
    
    <content type="html"><![CDATA[<p>近期数据结构课讲到多维数组及矩阵，说到数据存储在计算机中实际存储顺序的时候就晕了，概念自己倒是知道，但是自己算的时候就迷迷糊糊。身边也有同学和我抱怨说老师上课进度太快了，认为虽然c里面提过但上课还是需要再解释。想了想就写了这篇文章，也算是帮同学也帮自己大概理一下思路。<br><a id="more"></a></p><hr><p>本文将就多维数组的概念、<strong>C语言</strong>中多维数组的定义方法及内存分析等点进行解析。</p><p>在讲多维数组前，我会先说最基本的一维数组，然后再讲二维数组，再由二维数组引申至多维数组。所以建议已经了解数组的同学可以直接看二维数组，已经熟悉数组想搞清多维数组元素地址求解的同学直接往下拉到最后一部分。</p><h4 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h4><blockquote><p>数组是含有多个具有<strong>相同数据类型</strong>的数据的<em>有序</em>（此处的“有序”指所有元素依次存放在内存中相邻的<strong>一组线性空间内</strong>，除了第一个和最后一个元素外，每个元素有且只有一个前驱和后继）集合，数组中的数据称为数组元素。<strong>这些数据在内存中占用连续的存储空间</strong>。数组一旦定义，在程序执行期间其位置和大小不能再发生变化。</p></blockquote><p>这里涉及到的知识点有关计算机内存的存储结构了，接触过汇编或者是组成原理的同学肯定懂，不懂的同学建议去了解一下。简单形象地理解记忆，如图，我们的数据存储在相应存储器的存储单元中，计算机中存储单元都是按顺序排号的，每个存储单元有一个地址，通过对这个地址的查找你可以访问到对应的存储单元。<br><img src="http://owxxx8lxs.bkt.clouddn.com/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="数据存储示意图"><br>假设我们定义一个一维数组<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int a[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</div></pre></td></tr></table></figure></p><p>则它在内存中相应的存储形式如图。<br><img src="http://owxxx8lxs.bkt.clouddn.com/%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A8%E7%A4%BA%E4%BE%8B%E5%9B%BE.png" alt="一维数组存储示意图"></p><h5 id="一维数组元素地址求解"><a href="#一维数组元素地址求解" class="headerlink" title="一维数组元素地址求解"></a>一维数组元素地址求解</h5><p>数组寻址可由首地址+偏移量得到。也就是说，要想知道当前元素地址，则必须知道<strong>它所在数组的首址</strong>以及<strong>相对数组第一个元素的偏移量</strong>，而偏移量可以由$元素个数<em>单个元素所占内存大小$    计算得到，所以也就是说，除了数组首址，我们还必须知道在<strong>这个元素前还有多少个元素</strong></em>， 即   $首地址+前面元素个数<em>单个元素所占空间$  。譬如上面数组a[2]（即值为3的元素）的地址，a即为该数组的首地址，这个元素前面还有两个元素，所以它的地址为  $a+2</em>sizeof(int)$  。</p><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><blockquote><p>二维数组<strong>本质上是以<em>数组作为数组元素</em>的数组</strong>，即“数组的数组”。二维数组又称矩阵。        ——摘自《百度百科》</p></blockquote><p>如果拿我们最熟悉的坐标来类比的话，刚才的一维数组相当于是数轴上点的结合，一个下标就相当与其坐标，可以对应一个元素；而二维数组就是平面直角坐标系中的点的集合，两个下标课已对应一个元素。</p><p><strong>但是</strong>，计算机是线性的存储结构，是一条带子一样顺下来的，所以这种二维在计算机中也要按某种规则<em>转化成一维</em>。</p><p>《百度百科》中有一句话很关键：<strong>以数组作为数组元素</strong>。这句话从字面也不难理解，也就是我们定义了一个数组，这个数组的元素类型是数组类型，而这个为数组类型的元素其内部元素则为其他类型。</p><p>举个栗子：<br>$$A = \begin{bmatrix}<br>    1&amp;2&amp;3\\<br>    4&amp;5&amp;6\\<br>\end{bmatrix}$$一个$2*3$的矩阵A：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int a[<span class="string">2</span>][<span class="symbol">3</span>] = &#123;&#123;1, 2, 3&#125;,</div><div class="line"><span class="code">               &#123;4, 5, 6&#125;&#125;;</span></div></pre></td></tr></table></figure></p><p>上面我定义了一个二维数组，那么实际上它是由两个数组组成，一个是{1, 2, 3}，一个是{4, 5, 6}，而这两个数组又作为元素被存储在另一个更大的数组a[2][3]中。<br>按行优先存储的话，它在内存中的存储形式如图：<br><img src="http://owxxx8lxs.bkt.clouddn.com/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A8%E7%A4%BA%E4%BE%8B%E5%9B%BE.png" alt="二维行存储"><br>相比较来说，我个人更喜欢把它立体化成一个平面，照着定义来话，只不过需注意的是两组数组间的<strong>地址连续</strong>：<br><img src="http://owxxx8lxs.bkt.clouddn.com/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="二维行存储1"><br>默认对二维数组定义的话就是按行优先，但如果按列优先存储的话，它在内存中的存储形式如图：<br><img src="http://owxxx8lxs.bkt.clouddn.com/%E4%BA%8C%E7%BB%B4%E5%88%97%E5%AD%98%E5%82%A8%E7%A4%BA%E6%84%8F%E5%9B%BE1.png" alt="二维列存储"><br>同样的，立体化成平面：<br><img src="http://owxxx8lxs.bkt.clouddn.com/%E4%BA%8C%E7%BB%B4%E5%88%97%E5%AD%98%E5%82%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="二维列存储1"></p><p>按行优先存储和按列优先存储本质上没有什么区别，在代码上，也只是a[i][j]顺序调换一下即可。<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">\\按行优先</div><div class="line">int <span class="built_in">i</span>, <span class="built_in">j</span>; </div><div class="line"><span class="keyword">for</span>(<span class="built_in">i</span>=<span class="number">0</span>; <span class="built_in">i</span>&lt;<span class="number">2</span>; <span class="built_in">i</span>++)</div><div class="line">    <span class="keyword">for</span>(<span class="built_in">j</span>=<span class="number">0</span>; <span class="built_in">j</span>&lt;<span class="number">3</span>; <span class="built_in">j</span>++) &#123;</div><div class="line">        \\按行操作</div><div class="line">    &#125;</div><div class="line"></div><div class="line">\\按列优先</div><div class="line">int <span class="built_in">i</span>, <span class="built_in">j</span>;</div><div class="line"><span class="keyword">for</span>(<span class="built_in">j</span>=<span class="number">0</span>; <span class="built_in">j</span>&lt;<span class="number">3</span>; <span class="built_in">j</span>++)</div><div class="line">    <span class="keyword">for</span>(<span class="built_in">i</span>=<span class="number">0</span>; <span class="built_in">i</span>&lt;<span class="number">2</span>; <span class="built_in">i</span>++)</div><div class="line">        \\按列操作</div></pre></td></tr></table></figure></p><h5 id="二维数组元素地址求解"><a href="#二维数组元素地址求解" class="headerlink" title="二维数组元素地址求解"></a>二维数组元素地址求解</h5><p>和一维地址一样，我们需要知道的就是数组首址以及所求元素前面的元素个数。数组首址不需要我们计算，我们需要计算的就是元素个数，这个时候大家可以看立体化成面的图，我们可以看当前元素前面又多少行或列，因为这些行或者列都是完整的，所以我们只需用 行数（或列数）×每行（或每列）的元素个数×单个元素的所占内存大小，最后再加上该元素相对其所在行首址的偏移量即可。以上面的二维数组为例，求 a[1][2] 的地址，若按行优先存储，那么该元素前面有一行元素，每行有3个元素，第二行排在该元素前面有2个元素，那么这个元素的相对于首址的地址就是，$a+1×3×sizeof(int)+2×sizeof(int)$；而按列优先存储的话，则为 $a+2×2×sizeof(int)+1×sizeof(int)$。</p><blockquote><p><strong>划（考试）重点</strong>：可以看到所求哪个元素，其数组下标所对应的就代表了该元素前面有多少行（或列）该行（或列）有多少元素（仅针对于数组下标从0开始的语言）。按行优先是从右往左维数增加，按列优先是从左往右维数增加。这一点从代码能很清楚的看到，按行优先的时候，内层循环是数组下标靠右的，这个循环事先完成形成第一维，然后一维再不断地堆叠成二维。</p></blockquote><h4 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h4><p>其实二维数组写完我觉得已经很清楚了，只要能理解二维数组，那么多维数组也是一样的道理，而上面的<strong>（考试）重点</strong>也是对多维数组也成立的。</p><p>这里我将不再进行过多的文字说明，举一个三维数组和一个四维数组的栗子，画一下图，大家根据图再进行理解。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期数据结构课讲到多维数组及矩阵，说到数据存储在计算机中实际存储顺序的时候就晕了，概念自己倒是知道，但是自己算的时候就迷迷糊糊。身边也有同学和我抱怨说老师上课进度太快了，认为虽然c里面提过但上课还是需要再解释。想了想就写了这篇文章，也算是帮同学也帮自己大概理一下思路。&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://jinaoasher.site/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="C, 数组, 数据结构" scheme="http://jinaoasher.site/tags/C-%E6%95%B0%E7%BB%84-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>中秋快乐</title>
    <link href="http://jinaoasher.site/HappyMidAutumn/"/>
    <id>http://jinaoasher.site/HappyMidAutumn/</id>
    <published>2017-10-04T15:43:50.000Z</published>
    <updated>2017-10-29T06:08:41.601Z</updated>
    
    <content type="html"><![CDATA[<p>今天是2017年10月4日中秋，祝大家中秋快乐！<br><a id="more"></a></p><p>本来想在寝室玩一天的，后来还是去平台了。</p><p>摸了一下午的鱼，在某平台自学Java发现那个平台限制还是太多，逛了圈知乎后决定换视频学习的方法了。</p><p>然后找了半天终于找到了马士兵老师的视频。天啊老师的声音简直让人怀孕！真的强推，光声音我就喜欢到不行了。</p><p>既然兴趣有一点了，大概方向也有了那就开始安心学吧。</p><p>最近摸鱼有点频繁，状态也不对。</p><p>学校作业也没补完，明天补作业，补完再安心学。</p><p>就这样了。</p><p>晚安。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天是2017年10月4日中秋，祝大家中秋快乐！&lt;br&gt;
    
    </summary>
    
      <category term="日常" scheme="http://jinaoasher.site/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>feof()函数的正确理解</title>
    <link href="http://jinaoasher.site/feof/"/>
    <id>http://jinaoasher.site/feof/</id>
    <published>2017-10-02T13:27:22.000Z</published>
    <updated>2017-10-29T08:38:02.816Z</updated>
    
    <content type="html"><![CDATA[<p>在做课设作业的时候，发现用链表读取文件中的数据的时候总是会多读取一串，next加了又减，总觉得没有问题，于是翻开教科书，教科书上如是说。。。<a id="more"></a></p><blockquote><p>feof()函数用来检测文件读写位置指针是否已到文件末尾。<br>…….<br>如果文件读写位置指针已到文件末尾，则函数返回非0值（逻辑真）；否则函数返回0值（逻辑假）。</p></blockquote><p>emm看完我更懵了，是这样没有错嘛，然后一百度就发现问题了。</p><p>这里我以个人的理解解读下feof()函数，如果有错误欢迎指正。</p><hr><h2 id="了解函数"><a href="#了解函数" class="headerlink" title="了解函数"></a>了解函数</h2><p>我们先来看<a href="https://baike.baidu.com/item/feof/10942186?fr=aladdin#1" target="_blank" rel="external">百度百科</a>上的说法：</p><p><img src="http://owxxx8lxs.bkt.clouddn.com/feof.png" alt="feofDescription"></p><p>和教科书上一样。</p><p>但是下面的程序例中有不同的说法（<strong>注意加粗部分文字</strong>）：</p><blockquote><p>feof(fp)有两个返回值:如果遇到文件结束，函数feof（fp）的值为非零值，否则为0。</p><p>EOF是文本文件结束的标志。在文本文件中，数据是以字符的ASCⅡ代码值的形式存放，普通字符的ASCⅡ代码的范围是32到127（十进制），EOF的16进制代码为0xFF（十进制为-1），因此可以用EOF作为文件结束标志。</p><p>当把数据以二进制形式存放到文件中时，就会有-1值的出现，因此<strong>不能采用EOF作为二进制文件的结束标志</strong>。为解决这一个问题，ASCI C提供一个feof函数，用来判断文件是否结束。<strong>feof函数既可用以判断二进制文件又可用以判断文本文件。</strong></p><p>“C”语言的“feof()”函数和数据库中“eof()”函数的运作是<strong>完全不同的</strong>。<strong>数据库中“eof()”函数读取当前指针的位置，“C”语言的“feof()”函数返回的是最后一次“读操作的内容”</strong>。多年来把“位置和内容”相混，从而造成了对这一概念的似是而非。</p><p>那么，位置和内容到底有何不同呢？举个简单的例子，比如有人说“你走到火车的最后一节车箱”这就是位置。而如果说“请你一直向后走，摸到铁轨结束”这就是内容。也就是说用内容来判断会“多走一节”。这就是完全依赖于“while(!feof(FP)){…}”进行文件复制时，目标文档总会比源文档“多出一些”的原因。</p></blockquote><p>这段话关键要读懂“<em>数据库中“eof()”函数读取当前指针的位置，“C”语言的“feof()”函数返回的是最后一次“读操作的内容”</em>”这句话的意思。结合上述的“火车”，个人理解为：<strong>当feof()读到最后一串数据的时候，指向文件读写位置指针指在文件末尾，但是此时feof()并没有将fp-&gt;flag置为非0值（逻辑真），所以函数返回值为0值（逻辑假），所以函数还要继续读取，指针不得不继续往下移动，函数就这样多读了一些不相关数据。</strong></p><p><img src="http://owxxx8lxs.bkt.clouddn.com/feof3.png" alt="enter description here"></p><p>因此也可以理解为：当读取最后一串数据的时候，文件读写位置指针就已经指向文档结尾了，但是<strong>feof()必须要当读写位置超过读写范围时才会返回真值</strong>。</p><hr><p>以上为个人理解，如果有理解错误的地方欢迎指正~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做课设作业的时候，发现用链表读取文件中的数据的时候总是会多读取一串，next加了又减，总觉得没有问题，于是翻开教科书，教科书上如是说。。。
    
    </summary>
    
      <category term="C" scheme="http://jinaoasher.site/categories/C/"/>
    
    
      <category term="C" scheme="http://jinaoasher.site/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Code：Bolcks主题设置[详细图解]</title>
    <link href="http://jinaoasher.site/Code%EF%BC%9ABolcksThemesInstalling/"/>
    <id>http://jinaoasher.site/Code：BolcksThemesInstalling/</id>
    <published>2017-10-01T05:30:37.000Z</published>
    <updated>2017-10-29T08:37:50.156Z</updated>
    
    <content type="html"><![CDATA[<p>Code：Blocks默认的主题是白色背景的，长时间打代码不利于自己的眼睛。百度了下相关的文章，发现大部分文章方法并不详尽，对像我这样的小白兼菜鸡很不友好，故自己重新整理了一下。<br><a id="more"></a></p><hr><h2 id="Step-1：主题下载"><a href="#Step-1：主题下载" class="headerlink" title="Step 1：主题下载"></a>Step 1：主题下载</h2><ol><li><p>官方Wiki提供了15种代码高亮的主题，<a href="http://wiki.codeblocks.org/index.php?title=Syntax_highlighting_custom_colour_themes" target="_blank" rel="external">点击此链接进入官网页面下载</a><br>进入网站后，你会发现满屏幕的英文同时并没有相关的下载链接</p><p><img src="http://owxxx8lxs.bkt.clouddn.com/cbthemes1.png" alt="CBThemesInstalling1"></p></li><li><p>点击目录中的Installation，此时页面会由这个锚链节跳转至页面相应位置，</p><p><img src="http://owxxx8lxs.bkt.clouddn.com/cbthemes2.png" alt="CBThemesInstalling2"></p></li></ol><p>标题Installation下面的话大概翻译如下是（用chrome浏览器的可以直接点Google翻译）：</p><blockquote><p>跟着以下步骤来安装主题：<br>注意：在导入自定义配置文件之前，请始终备份您当前的配置文件！<br>确保安装过程中Code：Blocks没有在运行（划重点）。</p></blockquote><p>然后复制下面代码框中的代码到记事本文件中，命名一下并将后缀改成“.conf”。我这里把它命名为“themes.conf”，并放在桌面了。</p><h2 id="Step-2：主题安装"><a href="#Step-2：主题安装" class="headerlink" title="Step 2：主题安装"></a>Step 2：主题安装</h2><ol><li><p>进入你的Code：Blocks的安装根目录（默认在C盘），在文件搜索框直接搜索“default.conf”，选中，右键选择打开文件所在位置（一般地址中会有AppData），直接复制文件地址。</p><p><img src="http://owxxx8lxs.bkt.clouddn.com/cbthemes3.png" alt="CBThemesInstalling3"></p><p><img src="http://owxxx8lxs.bkt.clouddn.com/cbthemes4.png" alt="CBThemesInstalling4"></p></li><li><p>进入你的Code：Blocks 安装目录，双击打开cb_share_config.exe。</p><p><img src="http://owxxx8lxs.bkt.clouddn.com/cbthemes5.png" alt="CBThemesInstalling5"></p><p><img src="http://owxxx8lxs.bkt.clouddn.com/cbthemes6.png" alt="CBThemesInstalling6"></p><p>这个时候确保你的Code：Bolcks没有在运行，然后在左边的框中选择你复制下来的文件，右边的框中在地址栏直接粘贴刚才复制的地址然后选择“default.conf”。</p></li><li><p>接下来，将左边的框中全选，然后依次点击：Transfer，Save。</p><p>这个时候主题就安装完毕啦。等等，还没有全部结束，还要配置下主题。</p></li></ol><h2 id="Step-3：主题配置"><a href="#Step-3：主题配置" class="headerlink" title="Step 3：主题配置"></a>Step 3：主题配置</h2><ol><li><p>打开Code：Blocks，顶部菜单栏选择Settings -&gt; Editor，打开后在左侧选择Syntax Highlighting，然后在Colour theme 选择自己喜欢的主题，按OK确定。</p><p><img src="http://owxxx8lxs.bkt.clouddn.com/cbthemes7.png" alt="enter description here"></p></li><li><p>主题选定后，如果选的是暗色主题会发现光标颜色和背景颜色相近分不清，此时可以在刚才的界面左侧选择Margins and caret ，然后在caret栏中的Colour选择自己喜欢的颜色。</p><p><img src="http://owxxx8lxs.bkt.clouddn.com/cbthemes8.png" alt="enter description here"></p></li></ol><hr><p>如有错误，欢迎指正~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Code：Blocks默认的主题是白色背景的，长时间打代码不利于自己的眼睛。百度了下相关的文章，发现大部分文章方法并不详尽，对像我这样的小白兼菜鸡很不友好，故自己重新整理了一下。&lt;br&gt;
    
    </summary>
    
      <category term="Code：Bolocks" scheme="http://jinaoasher.site/categories/Code%EF%BC%9ABolocks/"/>
    
    
      <category term="Code：Blocks主题安装" scheme="http://jinaoasher.site/tags/Code%EF%BC%9ABlocks%E4%B8%BB%E9%A2%98%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>rand()</title>
    <link href="http://jinaoasher.site/rand/"/>
    <id>http://jinaoasher.site/rand/</id>
    <published>2017-10-01T02:41:13.000Z</published>
    <updated>2017-10-29T06:08:24.870Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//k=x+rand()%(y-x+1)，k即为所求范围内随机生成的数，rand()%a的结果最大为a-1</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight 1c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;
      
    
    </summary>
    
      <category term="代码杂货铺" scheme="http://jinaoasher.site/categories/%E4%BB%A3%E7%A0%81%E6%9D%82%E8%B4%A7%E9%93%BA/"/>
    
    
      <category term="C" scheme="http://jinaoasher.site/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>exit(0),exit(1)</title>
    <link href="http://jinaoasher.site/exit/"/>
    <id>http://jinaoasher.site/exit/</id>
    <published>2017-10-01T02:38:46.000Z</published>
    <updated>2017-10-29T06:09:35.941Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">exit</span>(<span class="number">1</span>);</div><div class="line"><span class="regexp">//</span>异常退出,比如你的代码在出现不应该出现的分枝,要求终止程序的时候就用<span class="keyword">exit</span>(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="keyword">exit</span>(<span class="number">0</span>);</div><div class="line"><span class="regexp">//</span>是正常退出,就是你认为代码一切正常的时候的退出</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div cl
      
    
    </summary>
    
      <category term="代码杂货铺" scheme="http://jinaoasher.site/categories/%E4%BB%A3%E7%A0%81%E6%9D%82%E8%B4%A7%E9%93%BA/"/>
    
    
      <category term="C" scheme="http://jinaoasher.site/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>warning assignment from incompatible pointer type</title>
    <link href="http://jinaoasher.site/type/"/>
    <id>http://jinaoasher.site/type/</id>
    <published>2017-09-28T15:47:34.000Z</published>
    <updated>2017-10-29T06:08:14.134Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">@warning: assignment from incompatible pointer <span class="keyword">type</span>    （指针类型不匹配）   </div><div class="line">*/</div><div class="line"></div><div class="line">//原代码</div><div class="line">struct <span class="keyword">Node</span><span class="title">&#123;</span></div><div class="line"><span class="title">  datatype</span> data;</div><div class="line">  struct <span class="keyword">Node</span> <span class="title">*next</span>;</div><div class="line"> struct <span class="keyword">Node</span> <span class="title">*pre</span>;</div><div class="line">&#125;;</div><div class="line">typedef struct <span class="keyword">Node</span> <span class="title">nodes</span>;</div><div class="line">typedef struct <span class="keyword">Node</span> <span class="title">*list</span>;      //与结构体中的指针类型冲突</div><div class="line"></div><div class="line"></div><div class="line">//修改后的代码</div><div class="line">typedef struct <span class="keyword">Node</span> <span class="title">*list</span>; </div><div class="line">struct <span class="keyword">Node</span><span class="title">&#123;</span></div><div class="line"><span class="title">datatype</span> data;</div><div class="line">  list next;</div><div class="line">  list pre; </div><div class="line">&#125;;</div><div class="line">typedef struct <span class="keyword">Node</span> <span class="title">nodes</span>;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div 
      
    
    </summary>
    
      <category term="代码杂货铺" scheme="http://jinaoasher.site/categories/%E4%BB%A3%E7%A0%81%E6%9D%82%E8%B4%A7%E9%93%BA/"/>
    
    
      <category term="C" scheme="http://jinaoasher.site/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>代码杂货铺</title>
    <link href="http://jinaoasher.site/%E4%BB%A3%E7%A0%81%E6%9D%82%E8%B4%A7%E9%93%BA/"/>
    <id>http://jinaoasher.site/代码杂货铺/</id>
    <published>2017-09-28T15:31:28.000Z</published>
    <updated>2017-10-29T06:08:02.063Z</updated>
    
    <content type="html"><![CDATA[<h3 id="《代码杂货铺》分类简介"><a href="#《代码杂货铺》分类简介" class="headerlink" title="《代码杂货铺》分类简介"></a>《代码杂货铺》分类简介</h3><p>想法源于自己在学习过程中不会主动并系统地去整理某些知识，所以会经常出现学过后即使运用后没几天就忘掉的情况。<br><a id="more"></a></p><p>故决定开设这一分类来统一这一零碎的学习碎片，说不定自己哪天突然就整理了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;《代码杂货铺》分类简介&quot;&gt;&lt;a href=&quot;#《代码杂货铺》分类简介&quot; class=&quot;headerlink&quot; title=&quot;《代码杂货铺》分类简介&quot;&gt;&lt;/a&gt;《代码杂货铺》分类简介&lt;/h3&gt;&lt;p&gt;想法源于自己在学习过程中不会主动并系统地去整理某些知识，所以会经常出现学过后即使运用后没几天就忘掉的情况。&lt;br&gt;
    
    </summary>
    
      <category term="代码杂货铺" scheme="http://jinaoasher.site/categories/%E4%BB%A3%E7%A0%81%E6%9D%82%E8%B4%A7%E9%93%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>这是一篇测试文章</title>
    <link href="http://jinaoasher.site/%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <id>http://jinaoasher.site/这是一篇测试文章/</id>
    <published>2017-09-28T10:04:39.000Z</published>
    <updated>2017-10-29T06:24:12.973Z</updated>
    
    <content type="html"><![CDATA[<p>如题嘻嘻<br><a id="more"></a></p><p>代码高亮测试<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">printf(<span class="string">"代码高亮测试成功了吗？"</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></p><hr><p>七牛云图床测试<br><img src="http://owxxx8lxs.bkt.clouddn.com/huaji.jpeg" alt="图片测试"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如题嘻嘻&lt;br&gt;
    
    </summary>
    
      <category term="网站测试" scheme="http://jinaoasher.site/categories/%E7%BD%91%E7%AB%99%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="网站测试" scheme="http://jinaoasher.site/tags/%E7%BD%91%E7%AB%99%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>

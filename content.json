{"meta":{"title":"金傲Asher","subtitle":null,"description":"逃出体制，奔向生命的大和谐","author":"金傲Asher","url":"http://jinaoasher.site"},"pages":[{"title":"","date":"2017-10-29T08:26:17.388Z","updated":"2017-10-29T08:26:17.388Z","comments":true,"path":"baidu_verify_EEgd3CrTuN.html","permalink":"http://jinaoasher.site/baidu_verify_EEgd3CrTuN.html","excerpt":"","text":"EEgd3CrTuN"},{"title":"分类","date":"2017-09-27T11:18:22.000Z","updated":"2017-10-29T08:23:29.822Z","comments":false,"path":"categories/index.html","permalink":"http://jinaoasher.site/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-09-28T11:01:10.000Z","updated":"2017-09-28T11:02:04.715Z","comments":true,"path":"tags/index.html","permalink":"http://jinaoasher.site/tags/index.html","excerpt":"","text":""},{"title":"","date":"2017-09-28T11:17:33.000Z","updated":"2017-10-29T07:11:26.960Z","comments":false,"path":"about/index.html","permalink":"http://jinaoasher.site/about/index.html","excerpt":"","text":"欢迎来到我的个人博客 关于我坐标”江西吃饭大学“的大二菜鸟一只，好高骛远，好吃懒做。 没什么兴趣爱好。 超级超级超级喜欢狗。未来理想生活是养一只柯基一只法斗一只金毛，然后过上没日没夜吸狗的糜烂人生2333。 此处引用一篇完美诠释我人生理想状态的满分作文： 《我最喜欢做的事》 我最喜欢做的事是吃喝拉尿玩。 吃就是每天吃着美食，ling食。喝就是每天喝着果汁，饮liao。拉就是拉屎。尿就是bie了就尿。玩是一天到晚都是玩，电脑、电视、手机，都能玩。我就想天天这样做，和猪一样。 喜欢捯饬些有的没的，比如这个博客。 天生没脑子，至于怎么活到今天的，啊这个问题超纲了。 生活在三个学霸室友的阴影中。 建站动机确实自己高中的时候就想过建立个个人网站，大一学习html5的时候大概是建站欲望最强烈的阶段。后来也是种种原因没有进行下去。 大二几乎推光了所有的部门活动能退的也退了，于是乎留出了一堆的空余时间，但是一看到网上繁琐的教程就又放弃多次了。 真正开始着手做是9月24日。中间尝试过简书，但由于主题不符合个人口味一直很抗拒使用；然后尝试过lofter，主题很好看啊，但是不支持markdown；之后用过typecho，也是由于某些原因没有用下去；最后就是现在的hexo。 不得不承认本人真的很笨，就这个网站搭建了将近5天时间。好在这次硬着头皮坚持下来了。 这两天发生了很多，很烦，努力劝慰别人的同时发现自己根本没那么大度。我一直和自己说做好自己就好了，但是这个社会和你不同，比如你会觉得有些事这么做不公平，而别人却可能觉得问心无愧。所谓的体制也是表面一套。在一纸公文，所谓的白纸黑字间抗争，夹缝求生，或是逃脱。算了，走一步是一步。 这两天一直鼓捣的个人博客：jinaoasher.site 好像又回到当初那个一遇到不顺心事就自己找个角落躲起来重新生活的样子了。 9月25日发生了一些很糟心的事情，于是我发了上面这条说说。 也确确实实是我自己想说的话。虽然事后有些后悔。 算是建站的一个转折点吧。 学习方向 &amp;&amp; 目标其实现在还是处在一个迷茫期，不知道自己喜欢什么，所以没有非常明确的目标。目前计划的学习方向是Java后端，后续跟据个人学习进度和兴趣爱好再进行选择。 非常希望找到志同道合的朋友一起学习一起进步，当然如果能抱到大腿是最好的啦~ 2017年10月27日更新：网站建立后个人状态就处于一个怠惰期和颓靡期，现自我规定周推1~2篇学习总结。 关于网站主要就是发些个人日常以及平时个人学习的一些经验。真诚地希望大佬们可以帮忙指点迷津指出文章错误。 QQ：202392365Email：jinaoasher@yeah.net"},{"title":"留言板","date":"2017-10-29T07:25:36.000Z","updated":"2017-10-29T08:00:34.008Z","comments":true,"path":"guestbook/index.html","permalink":"http://jinaoasher.site/guestbook/index.html","excerpt":"","text":"欢迎来到留言板！欢迎提问，欢迎吐槽，欢迎撩骚。 更希望对本站发展提出实质性建议，谢谢！:smile (不建议在留言板讨论本站某文章，请直接在该文章下评论)"}],"posts":[{"title":"多维顺序存储数组之地址求解问题","slug":"多维顺序存储数组之地址求解问题","date":"2017-10-29T14:08:50.000Z","updated":"2017-10-31T07:02:12.148Z","comments":true,"path":"多维顺序存储数组之地址求解问题/","link":"","permalink":"http://jinaoasher.site/多维顺序存储数组之地址求解问题/","excerpt":"近期数据结构课讲到多维数组及矩阵，说到数据存储在计算机中实际存储顺序的时候就晕了，概念自己倒是知道，但是自己算的时候就迷迷糊糊。身边也有同学和我抱怨说老师上课进度太快了，认为虽然c里面提过但上课还是需要再解释。想了想就写了这篇文章，也算是帮同学也帮自己大概理一下思路。","text":"近期数据结构课讲到多维数组及矩阵，说到数据存储在计算机中实际存储顺序的时候就晕了，概念自己倒是知道，但是自己算的时候就迷迷糊糊。身边也有同学和我抱怨说老师上课进度太快了，认为虽然c里面提过但上课还是需要再解释。想了想就写了这篇文章，也算是帮同学也帮自己大概理一下思路。 本文将就多维数组的概念、C语言中多维数组的定义方法及内存分析等点进行解析。 在讲多维数组前，我会先说最基本的一维数组，然后再讲二维数组，再由二维数组引申至多维数组。所以建议已经了解数组的同学可以直接看二维数组，已经熟悉数组想搞清多维数组元素地址求解的同学直接往下拉到最后一部分。 一维数组 数组是含有多个具有相同数据类型的数据的有序（此处的“有序”指所有元素依次存放在内存中相邻的一组线性空间内，除了第一个和最后一个元素外，每个元素有且只有一个前驱和后继）集合，数组中的数据称为数组元素。这些数据在内存中占用连续的存储空间。数组一旦定义，在程序执行期间其位置和大小不能再发生变化。 这里涉及到的知识点有关计算机内存的存储结构了，接触过汇编或者是组成原理的同学肯定懂，不懂的同学建议去了解一下。简单形象地理解记忆，如图，我们的数据存储在相应存储器的存储单元中，计算机中存储单元都是按顺序排号的，每个存储单元有一个地址，通过对这个地址的查找你可以访问到对应的存储单元。假设我们定义一个一维数组1int a[3] = &#123;1, 2, 3&#125;; 则它在内存中相应的存储形式如图。 一维数组元素地址求解数组寻址可由首地址+偏移量得到。也就是说，要想知道当前元素地址，则必须知道它所在数组的首址以及相对数组第一个元素的偏移量，而偏移量可以由$元素个数单个元素所占内存大小$ 计算得到，所以也就是说，除了数组首址，我们还必须知道在这个元素前还有多少个元素， 即 首地址+前面元素个数×单个元素所占空间 。譬如上面数组a[2]（即值为3的元素）的地址，a即为该数组的首地址，这个元素前面还有两个元素，所以它的地址为 $a+2×sizeof(int)$ 。 二维数组 二维数组本质上是以数组作为数组元素的数组，即“数组的数组”。二维数组又称矩阵。 ——摘自《百度百科》 如果拿我们最熟悉的坐标来类比的话，刚才的一维数组相当于是数轴上点的结合，一个下标就相当与其坐标，可以对应一个元素；而二维数组就是平面直角坐标系中的点的集合，两个下标课已对应一个元素。 但是，计算机是线性的存储结构，是一条带子一样顺下来的，所以这种二维在计算机中也要按某种规则转化成一维。 《百度百科》中有一句话很关键：以数组作为数组元素。这句话从字面也不难理解，也就是我们定义了一个数组，这个数组的元素类型是数组类型，而这个为数组类型的元素其内部元素则为其他类型。 举个栗子：$$A = \\begin{bmatrix} 1&amp;2&amp;3\\\\ 4&amp;5&amp;6\\\\\\end{bmatrix}$$一个$2*3$的矩阵A：12int a[2][3] = &#123;&#123;1, 2, 3&#125;, &#123;4, 5, 6&#125;&#125;; 上面我定义了一个二维数组，那么实际上它是由两个数组组成，一个是{1, 2, 3}，一个是{4, 5, 6}，而这两个数组又作为元素被存储在另一个更大的数组a[2][3]中。按行优先存储的话，它在内存中的存储形式如图：相比较来说，我个人更喜欢把它立体化成一个平面，照着定义来话，只不过需注意的是两组数组间的地址连续：默认对二维数组定义的话就是按行优先，但如果按列优先存储的话，它在内存中的存储形式如图：同样的，立体化成平面： 按行优先存储和按列优先存储本质上没有什么区别，在代码上，也只是a[i][j]顺序调换一下即可。123456789101112\\\\按行优先int i, j; for(i=0; i&lt;2; i++) for(j=0; j&lt;3; j++) &#123; \\\\按行操作 &#125;\\\\按列优先int i, j;for(j=0; j&lt;3; j++) for(i=0; i&lt;2; i++) \\\\按列操作 二维数组元素地址求解和一维地址一样，我们需要知道的就是数组首址以及所求元素前面的元素个数。数组首址不需要我们计算，我们需要计算的就是元素个数，这个时候大家可以看立体化成面的图，我们可以看当前元素前面又多少行或列，因为这些行或者列都是完整的，所以我们只需用 行数（或列数）×每行（或每列）的元素个数×单个元素的所占内存大小，最后再加上该元素相对其所在行首址的偏移量即可。以上面的二维数组为例，求 a[1][2] 的地址，若按行优先存储，那么该元素前面有一行元素，每行有3个元素，第二行排在该元素前面有2个元素，那么这个元素的相对于首址的地址就是，$a+1×3×sizeof(int)+2×sizeof(int)$；而按列优先存储的话，则为 $a+2×2×sizeof(int)+1×sizeof(int)$。 划（考试）重点：可以看到所求哪个元素，其数组下标所对应的就代表了该元素前面有多少行（或列）该行（或列）有多少元素（仅针对于数组下标从0开始的语言）。按行优先是从右往左维数增加，按列优先是从左往右维数增加。这一点从代码能很清楚的看到，按行优先的时候，内层循环是数组下标靠右的，这个循环事先完成形成第一维，然后一维再不断地堆叠成二维。 多维数组其实二维数组写完我觉得已经很清楚了，只要能理解二维数组，那么多维数组也是一样的道理，而上面的（考试）重点也是对多维数组也成立的。 这里我将不再进行过多的文字说明，举一个三维数组的栗子，画一下图，大家根据图再进行理解。 定义一个三维数组： 123int a[3][2][3] = &#123;&#123;1, 2, 3&#125;, &#123;4, 5, 6&#125;, &#123; 7, 8 ,9&#125;&#125;; 相对应的存储示意图如下： 大家可以自行假设要求某个元素的地址，进行计算。 一维、二维、三维数组我们可以与数轴、平面直角坐标系、空间直角坐标系分别关联记忆，但是维数再往上加就找不到类似的了。但是，方法还是一样的，大家可以理解为，每增加一个维度，就相当于将先前的等空间地复制一份进行存储。 四维及更多维数组的存储形式： 总结划重点： 多维数组a[isize][jsize][ksize][…][lsize]某元素地址的求解公式：按行优先存储：$$&amp;a[i][j][k][…][l] = i×jsize×ksize×…×lsize + j×ksize×..×lsize + ksize×…×lsize + … + l$$按列优先存储：$$&amp;a[i][j][k][…][l] = l×…×ksize×jsize×isize + … + k×jsize×isize + j×isize + i$$ 求解公式其实就是这么简单，但是重要的是在于理解。理解的关键点就在于对维数的分解。如果还有不理解的同学，建议结合空间想象和从代码的循环实现角度去想：n重循环实现n维数组的存储，最内层循环是第一维，每往外出一层循环相应的维数就加一，计算地址的时候则是由外至内拆解。 本文为本人原创，如有错误欢迎指正~","categories":[{"name":"数据结构","slug":"数据结构","permalink":"http://jinaoasher.site/categories/数据结构/"}],"tags":[{"name":"C, 数组, 数据结构","slug":"C-数组-数据结构","permalink":"http://jinaoasher.site/tags/C-数组-数据结构/"}]},{"title":"中秋快乐","slug":"HappyMidAutumn","date":"2017-10-04T15:43:50.000Z","updated":"2017-10-29T06:08:41.601Z","comments":true,"path":"HappyMidAutumn/","link":"","permalink":"http://jinaoasher.site/HappyMidAutumn/","excerpt":"今天是2017年10月4日中秋，祝大家中秋快乐！","text":"今天是2017年10月4日中秋，祝大家中秋快乐！ 本来想在寝室玩一天的，后来还是去平台了。 摸了一下午的鱼，在某平台自学Java发现那个平台限制还是太多，逛了圈知乎后决定换视频学习的方法了。 然后找了半天终于找到了马士兵老师的视频。天啊老师的声音简直让人怀孕！真的强推，光声音我就喜欢到不行了。 既然兴趣有一点了，大概方向也有了那就开始安心学吧。 最近摸鱼有点频繁，状态也不对。 学校作业也没补完，明天补作业，补完再安心学。 就这样了。 晚安。","categories":[{"name":"日常","slug":"日常","permalink":"http://jinaoasher.site/categories/日常/"}],"tags":[]},{"title":"feof()函数的正确理解","slug":"feof","date":"2017-10-02T13:27:22.000Z","updated":"2017-10-29T08:38:02.816Z","comments":true,"path":"feof/","link":"","permalink":"http://jinaoasher.site/feof/","excerpt":"在做课设作业的时候，发现用链表读取文件中的数据的时候总是会多读取一串，next加了又减，总觉得没有问题，于是翻开教科书，教科书上如是说。。。","text":"在做课设作业的时候，发现用链表读取文件中的数据的时候总是会多读取一串，next加了又减，总觉得没有问题，于是翻开教科书，教科书上如是说。。。 feof()函数用来检测文件读写位置指针是否已到文件末尾。…….如果文件读写位置指针已到文件末尾，则函数返回非0值（逻辑真）；否则函数返回0值（逻辑假）。 emm看完我更懵了，是这样没有错嘛，然后一百度就发现问题了。 这里我以个人的理解解读下feof()函数，如果有错误欢迎指正。 了解函数我们先来看百度百科上的说法： 和教科书上一样。 但是下面的程序例中有不同的说法（注意加粗部分文字）： feof(fp)有两个返回值:如果遇到文件结束，函数feof（fp）的值为非零值，否则为0。 EOF是文本文件结束的标志。在文本文件中，数据是以字符的ASCⅡ代码值的形式存放，普通字符的ASCⅡ代码的范围是32到127（十进制），EOF的16进制代码为0xFF（十进制为-1），因此可以用EOF作为文件结束标志。 当把数据以二进制形式存放到文件中时，就会有-1值的出现，因此不能采用EOF作为二进制文件的结束标志。为解决这一个问题，ASCI C提供一个feof函数，用来判断文件是否结束。feof函数既可用以判断二进制文件又可用以判断文本文件。 “C”语言的“feof()”函数和数据库中“eof()”函数的运作是完全不同的。数据库中“eof()”函数读取当前指针的位置，“C”语言的“feof()”函数返回的是最后一次“读操作的内容”。多年来把“位置和内容”相混，从而造成了对这一概念的似是而非。 那么，位置和内容到底有何不同呢？举个简单的例子，比如有人说“你走到火车的最后一节车箱”这就是位置。而如果说“请你一直向后走，摸到铁轨结束”这就是内容。也就是说用内容来判断会“多走一节”。这就是完全依赖于“while(!feof(FP)){…}”进行文件复制时，目标文档总会比源文档“多出一些”的原因。 这段话关键要读懂“数据库中“eof()”函数读取当前指针的位置，“C”语言的“feof()”函数返回的是最后一次“读操作的内容””这句话的意思。结合上述的“火车”，个人理解为：当feof()读到最后一串数据的时候，指向文件读写位置指针指在文件末尾，但是此时feof()并没有将fp-&gt;flag置为非0值（逻辑真），所以函数返回值为0值（逻辑假），所以函数还要继续读取，指针不得不继续往下移动，函数就这样多读了一些不相关数据。 因此也可以理解为：当读取最后一串数据的时候，文件读写位置指针就已经指向文档结尾了，但是feof()必须要当读写位置超过读写范围时才会返回真值。 以上为个人理解，如果有理解错误的地方欢迎指正~","categories":[{"name":"C","slug":"C","permalink":"http://jinaoasher.site/categories/C/"}],"tags":[{"name":"C","slug":"C","permalink":"http://jinaoasher.site/tags/C/"}]},{"title":"Code：Bolcks主题设置[详细图解]","slug":"Code：BolcksThemesInstalling","date":"2017-10-01T05:30:37.000Z","updated":"2017-10-29T08:37:50.156Z","comments":true,"path":"Code：BolcksThemesInstalling/","link":"","permalink":"http://jinaoasher.site/Code：BolcksThemesInstalling/","excerpt":"Code：Blocks默认的主题是白色背景的，长时间打代码不利于自己的眼睛。百度了下相关的文章，发现大部分文章方法并不详尽，对像我这样的小白兼菜鸡很不友好，故自己重新整理了一下。","text":"Code：Blocks默认的主题是白色背景的，长时间打代码不利于自己的眼睛。百度了下相关的文章，发现大部分文章方法并不详尽，对像我这样的小白兼菜鸡很不友好，故自己重新整理了一下。 Step 1：主题下载 官方Wiki提供了15种代码高亮的主题，点击此链接进入官网页面下载进入网站后，你会发现满屏幕的英文同时并没有相关的下载链接 点击目录中的Installation，此时页面会由这个锚链节跳转至页面相应位置， 标题Installation下面的话大概翻译如下是（用chrome浏览器的可以直接点Google翻译）： 跟着以下步骤来安装主题：注意：在导入自定义配置文件之前，请始终备份您当前的配置文件！确保安装过程中Code：Blocks没有在运行（划重点）。 然后复制下面代码框中的代码到记事本文件中，命名一下并将后缀改成“.conf”。我这里把它命名为“themes.conf”，并放在桌面了。 Step 2：主题安装 进入你的Code：Blocks的安装根目录（默认在C盘），在文件搜索框直接搜索“default.conf”，选中，右键选择打开文件所在位置（一般地址中会有AppData），直接复制文件地址。 进入你的Code：Blocks 安装目录，双击打开cb_share_config.exe。 这个时候确保你的Code：Bolcks没有在运行，然后在左边的框中选择你复制下来的文件，右边的框中在地址栏直接粘贴刚才复制的地址然后选择“default.conf”。 接下来，将左边的框中全选，然后依次点击：Transfer，Save。 这个时候主题就安装完毕啦。等等，还没有全部结束，还要配置下主题。 Step 3：主题配置 打开Code：Blocks，顶部菜单栏选择Settings -&gt; Editor，打开后在左侧选择Syntax Highlighting，然后在Colour theme 选择自己喜欢的主题，按OK确定。 主题选定后，如果选的是暗色主题会发现光标颜色和背景颜色相近分不清，此时可以在刚才的界面左侧选择Margins and caret ，然后在caret栏中的Colour选择自己喜欢的颜色。 如有错误，欢迎指正~","categories":[{"name":"Code：Bolocks","slug":"Code：Bolocks","permalink":"http://jinaoasher.site/categories/Code：Bolocks/"}],"tags":[{"name":"Code：Blocks主题安装","slug":"Code：Blocks主题安装","permalink":"http://jinaoasher.site/tags/Code：Blocks主题安装/"}]},{"title":"rand()","slug":"rand","date":"2017-10-01T02:41:13.000Z","updated":"2017-10-29T06:08:24.870Z","comments":true,"path":"rand/","link":"","permalink":"http://jinaoasher.site/rand/","excerpt":"","text":"1//k=x+rand()%(y-x+1)，k即为所求范围内随机生成的数，rand()%a的结果最大为a-1","categories":[{"name":"代码杂货铺","slug":"代码杂货铺","permalink":"http://jinaoasher.site/categories/代码杂货铺/"}],"tags":[{"name":"C","slug":"C","permalink":"http://jinaoasher.site/tags/C/"}]},{"title":"exit(0),exit(1)","slug":"exit","date":"2017-10-01T02:38:46.000Z","updated":"2017-10-29T06:09:35.941Z","comments":true,"path":"exit/","link":"","permalink":"http://jinaoasher.site/exit/","excerpt":"","text":"12345exit(1);//异常退出,比如你的代码在出现不应该出现的分枝,要求终止程序的时候就用exit(1)exit(0);//是正常退出,就是你认为代码一切正常的时候的退出","categories":[{"name":"代码杂货铺","slug":"代码杂货铺","permalink":"http://jinaoasher.site/categories/代码杂货铺/"}],"tags":[{"name":"C","slug":"C","permalink":"http://jinaoasher.site/tags/C/"}]},{"title":"warning assignment from incompatible pointer type","slug":"type","date":"2017-09-28T15:47:34.000Z","updated":"2017-10-29T06:08:14.134Z","comments":true,"path":"type/","link":"","permalink":"http://jinaoasher.site/type/","excerpt":"","text":"12345678910111213141516171819202122/* @warning: assignment from incompatible pointer type （指针类型不匹配） */ //原代码 struct Node&#123; datatype data; struct Node *next; struct Node *pre; &#125;; typedef struct Node nodes; typedef struct Node *list; //与结构体中的指针类型冲突 //修改后的代码 typedef struct Node *list; struct Node&#123; datatype data; list next; list pre; &#125;; typedef struct Node nodes;","categories":[{"name":"代码杂货铺","slug":"代码杂货铺","permalink":"http://jinaoasher.site/categories/代码杂货铺/"}],"tags":[{"name":"C","slug":"C","permalink":"http://jinaoasher.site/tags/C/"}]},{"title":"代码杂货铺","slug":"代码杂货铺","date":"2017-09-28T15:31:28.000Z","updated":"2017-10-29T06:08:02.063Z","comments":true,"path":"代码杂货铺/","link":"","permalink":"http://jinaoasher.site/代码杂货铺/","excerpt":"《代码杂货铺》分类简介想法源于自己在学习过程中不会主动并系统地去整理某些知识，所以会经常出现学过后即使运用后没几天就忘掉的情况。","text":"《代码杂货铺》分类简介想法源于自己在学习过程中不会主动并系统地去整理某些知识，所以会经常出现学过后即使运用后没几天就忘掉的情况。 故决定开设这一分类来统一这一零碎的学习碎片，说不定自己哪天突然就整理了。","categories":[{"name":"代码杂货铺","slug":"代码杂货铺","permalink":"http://jinaoasher.site/categories/代码杂货铺/"}],"tags":[]},{"title":"这是一篇测试文章","slug":"这是一篇测试文章","date":"2017-09-28T10:04:39.000Z","updated":"2017-10-29T06:24:12.973Z","comments":true,"path":"这是一篇测试文章/","link":"","permalink":"http://jinaoasher.site/这是一篇测试文章/","excerpt":"如题嘻嘻","text":"如题嘻嘻 代码高亮测试1printf(\"代码高亮测试成功了吗？\"); 七牛云图床测试","categories":[{"name":"网站测试","slug":"网站测试","permalink":"http://jinaoasher.site/categories/网站测试/"}],"tags":[{"name":"网站测试","slug":"网站测试","permalink":"http://jinaoasher.site/tags/网站测试/"}]}]}